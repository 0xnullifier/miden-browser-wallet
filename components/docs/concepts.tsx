import { Link } from "@/components/docs/common";
import { CodeBlock } from "@/components/ui/code-block";
import { INDEXING_TX_CODE, UNAUTH_NOTES_SEND_CODE } from "@/lib/code";
export function Concepts() {
  return (
    <div className="w-full px-4 sm:px-6 md:px-8 py-4 mx-auto max-w-none lg:max-w-4xl">
      <p
        className="text-xl sm:text-2xl md:text-3xl font-bold text-wrap hyphens-auto"
        id="concepts"
      >
        Concepts
      </p>
      <div className="py-4 text-sm sm:text-base text-wrap text-foreground leading-relaxed hyphens-auto">
        {" "}
        For greater detail on Miden protocol primitives you can refer to the{" "}
        <Link
          href="https://0xmiden.github.io/miden-docs/imported/miden-base/src/index.html"
          text="Protocol Section of the Miden Book."
        />
        <p
          className="text-lg sm:text-xl md:text-2xl font-bold py-4 text-wrap hyphens-auto"
          id="concepts-unauth"
        >
          Unauthenticated Notes
        </p>
        <p className="text-foreground text-wrap leading-relaxed hyphens-auto">
          Unauthenticated Notes allow consumption of Notes that are not fully
          committed yet. This means that both the creation and consumption of
          notes can happen in the same block, allowing for sub-block time
          settlements. There has to be a side channel for communication of note
          bytes generated by your application, which is quite simple to set up
          and is a good tradeoff for the speedup that you get.{" "}
        </p>
        <div className="py-4">
          <CodeBlock
            language="typescript"
            filename="mint.ts"
            code={UNAUTH_NOTES_SEND_CODE}
          />
        </div>
        <p
          className="text-lg sm:text-xl md:text-2xl font-bold py-4 text-wrap hyphens-auto"
          id="concepts-indexing"
        >
          Indexing Transactions
        </p>
        <p className="text-foreground text-wrap leading-relaxed hyphens-auto">
          Indexing transactions is a way to get the transaction data from the
          blockchain. This is useful for things like displaying transaction
          history, getting account balances etc. The RPC provides the
          functionality to get updates for interested accounts. You can do this
          in Rust via:
        </p>
        <div className="py-4">
          <CodeBlock
            language="rust"
            filename="indexer.rs"
            code={INDEXING_TX_CODE}
          />
        </div>
      </div>
    </div>
  );
}
